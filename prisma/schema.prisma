datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

// data needed to import tasks from an external source
model Source {
  id String @id @default(cuid())

  // type of source
  // - gitlab  
  type String

  // type of import in use
  // - pull
  // - webhook
  // - pullAndWebhook
  importType String

  // base url for this source (if applicable)
  // e.g. `https://gitlab.com/api/v4` for managed gitlab
  baseUrl String?

  // encrypted json, depends on type in use
  // contains auth data (e.g. token) and other source-related settings
  settings String /// @encrypted?mode=strict

  // default context to use for imported tasks
  defaultContextToUse String?

  // default tags to apply to imported tasks
  defaultTags String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  context Context? @relation(fields: [defaultContextToUse], references: [name])

  Task Task[]
}

// default tags to use in filtering the view and during task creation
model Context {
  name String @id @unique

  tags   String
  Source Source[]
}

model Task {
  id          String  @id @default(cuid())
  projectName String?

  // status of task
  // pending = still working on the task
  // waiting = a scheduled future date was used, the task is hidden
  // completed = task successfully completed
  // deleted = task deleted because it's no longer relevant
  status String @default("pending")

  // external url for this task, can be used when
  // the task is imported from an external source
  webUrl String?

  title String

  // markdown supported
  description String?

  scheduled DateTime?

  due DateTime?

  // comma separated tags
  tags String?

  // if this task was imported
  // contains the raw json content based on the source
  rawImportedData String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // populated if this task was imported from an external source
  fromSource   Source? @relation(fields: [fromSourceId], references: [id])
  fromSourceId String?
}
